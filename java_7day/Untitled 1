Class / 클래스 
	정의 : 붕어빵 틀
	구성요소 : 변수(전역변수)global : 자동초기화 ,  
			메소드 : 
			 변수(지역변수)Local : 자동초기화 아님,
			자기 자신을 나타내는 객체 : this. 가 있다. 함수의 파라메터이름과 클래스 변수의 이름이 같을때 구분하기 위해 사용.
						ex) this.name = name;
	
	
	
Object / 객체  
	정의 :  붕어빵
	만드는 방법
	Class 명 객체 명 = new 클래스명();
	생성자 : ex 클래스명 ();
	역활 및 기능 : 객체 생성 시 자동으로 호출되고 그 이후에 객체 생성
			 	대표적인 overloading
			 	리턴타입이 없다. void 를 사용하는게 아니라 원래 없음.
			 	생성자는 초기화 작업을 한다.
			 	생성자는 사용자가 호출할 수 없고 호출하려면 또 다른 생성자 안에서 사용한다.
			 	이때 반드시 첫번째 코드로 사용해야 한다. 
	생성자 호출 방법 : this(), this(a,b,c) etc...
	기본생성자 : 사용자가 생성자를 안만들 시 모든 클래스를 기본생성자를 default 값으로 제공(은닉해서) 
	매개변수 생성자 : 사용자가 만드는 생성자 , 사용자가 만들면 기본생성자는 사라지기 때문에 기본생성자 를 따로 표기해야함
	
	클래스의 특징 : 
	캡슐화 : 은닉의 성격
		 : ?? 그러면 변수의 값을 외부에서 어떻게 읽고 쓰는가?
		 : 캡슐화 하는법 private  를 사용 / 주로 변수에게
		 : get,set 이라는 public 메서드 사용.
	오버로드 : 과적 / 메소드 명은 같고 매개변수의 갯수나 형태가 다를때
			--> 이름이 같아도 매개변수로 구분이 가능하기 떄문에 허용할수 있다.
			--> 한반에 홍길동이 있으면 홍길동(크다) , 홍길동(작다) 등으로 구분 함
		  : 메소드명 ()
		  : 메소드명 (int a , String b....)
		  
		 
		  
번외 : 클래스의 맴버변수가 많아서 다양한 초기화를 필요로 할때 생성자를 이용하면 
	경우의 수만큼 생성자를 만들어 줘여 함 
	해결방법 : 메소드체이닝 기법 
	메소드 체이닝 : setter 함수를 void 가 아닌 객체를 리턴하게 설계하여 사용한다.


		  
		   